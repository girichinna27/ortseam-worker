# .github/workflows/reusable-workflow.yml
name: Build and Push Docker Image to Jfrog & call SSD CLI

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      jfrog_repo_url:
        required: true
        type: string
      context:  # Add this input to match what is passed in ci.yml
        required: false
        type: string
        default: '.'  
      org:
        description: 'Organization name'
        required: true
        type: string
      application_tags:
        description: 'Application tags'
        type: string
    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_PASSWORD:
        required: true
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Get Timestamp 
      - name: Set timestamp variable
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
  
      # Step 2: Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v3

            # Set up Python (for semgrep installation)
      # Step 3: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 4: Install Semgrep directly
      - name: Install Semgrep
        run: |
          pip install semgrep==1.50.0
          semgrep --version

      # Step 5: Download SSD Scanner CLI with specific architecture
      - name: Download SSD Scanner CLI
        run: |
          curl -L -o ssd-scanner-cli https://github.com/OpsMx/ssd-scanner-cli-public/releases/download/v0.0.50-alpha7/ssd-scanner-cli-amd64
          chmod +x ssd-scanner-cli
          sudo mv ssd-scanner-cli /usr/local/bin/
          # Verify the download
          ssd-scanner-cli --version || echo "Failed to get version, but continuing"

      # Step 6: Install other dependencies
      - name: Install additional dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      # Step 7: Check for .env and config files
      - name: Examine source code structure
        run: |
          echo "=== Repository Structure ==="
          find . -type f | grep -v "/.git/" | sort
          
          # Check if .env file exists
          if [ -f ".env" ]; then
            echo ".env file found - will be scanned for secrets"
            LINES=$(wc -l < .env)
            echo ".env contains $LINES lines"
            echo "Lines potentially containing secrets: $(grep -i -E 'key|secret|password|token|credential' .env | wc -l)"
          else
            echo ".env file not found"
          fi
          
          # Look for any files that might contain sensitive data
          echo "=== Potential config/secret files ==="
          find . -name "*.env*" -o -name "*.yaml" -o -name "*.yml" -o -name "*.conf" -o -name "*.config" -o -name "*.json" -o -name "*.properties" | grep -v "/.git/"

      # Step 8: Setup Scan Environment with custom persistent directories
      - name: Setup Scan Environment
        run: |
          CUSTOM_SCAN_DIR="${GITHUB_WORKSPACE}/scan-results-dir"
          REPORT_DIR="${GITHUB_WORKSPACE}/report-dir"
          LOG_DIR="${GITHUB_WORKSPACE}/logs-dir"

          mkdir -p "$CUSTOM_SCAN_DIR" "$REPORT_DIR" "$LOG_DIR"
          chmod -R 777 "$CUSTOM_SCAN_DIR" "$REPORT_DIR" "$LOG_DIR"

          # Set environment variables for later steps
          echo "CUSTOM_SCAN_DIR=$CUSTOM_SCAN_DIR" >> $GITHUB_ENV
          echo "DEFAULT_SCAN_DIR=/home/runner/.local/bin/ssd-scan-results" >> $GITHUB_ENV
          echo "REPORT_DIR=$REPORT_DIR" >> $GITHUB_ENV
          echo "LOG_DIR=$LOG_DIR" >> $GITHUB_ENV
          
      # Step 9: Push Image to JFrog Artifactory repo 
      - name: Push Image to JFrog Artifactory
        env:
          JFROG_REPO_URL: ${{ secrets.JFROG_REPO_URL }}
          JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
          JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

      # Step 10: Login to JFrog
      - name: Log in to JFrog Artifactory
        run: |
          echo "${JFROG_PASSWORD}" | docker login -u "${JFROG_USERNAME}" --password-stdin "${JFROG_REPO_URL}"

          # Set the full image path for later use
          FULL_IMAGE_PATH="trial451ad8.jfrog.io/dev-docker-docker/nginx:latest"
          IMAGE_NAME="trial451ad8.jfrog.io/dev-docker-docker/nginx"
          echo "FULL_IMAGE_PATH=${FULL_IMAGE_PATH}" >> $GITHUB_ENV
          
          # Pull the image
          docker pull "${FULL_IMAGE_PATH}"
          
          # Create a new tag with timestamp
          docker tag "${FULL_IMAGE_PATH}" "${IMAGE_NAME}:${TIMESTAMP}"
          
          # Important: Push the new tag to JFrog so scanner can access it
          docker push "${IMAGE_NAME}:${TIMESTAMP}"
          
      # Step 11: Run Source Code Scans with SSD Scanner CLI
      - name: Run Source Code Scans
        env:
          UPLOAD_URL: ${{ secrets.UPLOAD_URL }}
          SSD_TEAM_TOKEN: ${{ secrets.SSD_TEAM_TOKEN }}
        run: |
          echo "=== Running SOURCE CODE scans with SSD Scanner CLI ==="
          ssd-scanner-cli \
            --scanners=trivy,semgrep,openssf \
            --trivy-scanners=codelicensescan,codesecretscan,sbom,imagelicensescan,imagesecretscan \
            --artifact-type="image" \
            --artifact-name="${IMAGE_NAME}" \
            --artifact-tag="${TIMESTAMP}" \
            --upload-url="${UPLOAD_URL}" \
            --ssd-token="${SSD_TEAM_TOKEN}" \
            --source-code-path="${GITHUB_WORKSPACE}" \
            --repository-url="https://github.com/${{ github.repository }}" \
            --branch="${{ github.ref_name }}" \
            --build-id="${{ github.run_id }}" \
            --offline-mode=false \
            --debug=true \
            --keep-results=true  \
            
          SCAN_EXIT_CODE=$?
          echo "SCAN_EXIT_CODE=$SCAN_EXIT_CODE" >> $GITHUB_ENV
          echo "SCAN_EXIT_CODE=$SCAN_EXIT_CODE"

      # Step 12: Print Scan Results if offline mode is enabled
      - name: Print Scan Results
        if: always()
        run: |
          echo "=== Scan Results Summary ==="
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Build ID: ${{ github.run_id }}"
          echo "Image: $IMAGE_NAME:$TIMESTAMP"
          echo "Scan Exit Code: ${{ env.SCAN_EXIT_CODE }}"
          echo ""
          echo "Scan result files:"
          find $SCAN_DIR -type f -exec echo "File: {}" \;

      # Step 13: Check scan status
      - name: Check scan status
        if: always()
        run: |
          if [ "${{ env.SCAN_EXIT_CODE }}" != "0" ]; then
            echo "Security scan failed with exit code ${{ env.SCAN_EXIT_CODE }}"
            exit 1
          fi

      # Step 14: Send Build Event to SSD
      - name: Send Build Event to SSD
        env:
          SSD_URL: ${{ secrets.UPLOAD_URL }}
        run: |
          curl --location "${{ secrets.UPLOAD_URL }}/webhook/v1/ssd" \
               --header "Content-Type: application/json" \
               --data '{
                 "jobname": "${{ github.workflow }}",
                 "buildnumber": "${{ github.run_number }}",
                 "joburl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                 "gitcommit": "${{ github.sha }}",
                 "builduser": "${{ github.actor }}",
                 "giturl": "https://github.com/${{ github.repository }}",
                 "gitbranch": "${{ github.ref_name }}",
                 "artifacts": [
                   {
                     "image": "'"${IMAGE_NAME}"'",
                     "service": "'"${TIMESTAMP}"'"
                   }
                 ]
               }'
